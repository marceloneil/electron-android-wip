apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "org.electroncash.electroncash"
        minSdkVersion 18
        targetSdkVersion 26
        versionName "3.1.3"
        versionCode Integer.parseInt(String.join("", android.defaultConfig.versionName.tokenize(".")))
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDir 'src/main/libs'
    }

    task buildPython(type: Exec, description: 'Build the python component of Electron Cash') {
//        IntelliJ can't run python :(
//        commandLine '/usr/bin/python3 -m pythonforandroid.toolchain apk',
//                '--dist-name electroncash',
//                '--requirements python3crystax,openssl',
//                '--bootstrap library',
//                "--private $electron",
//                "--sdk-dir $android.sdkDirectory",
//                "--ndk-dir $android.ndkDirectory",
//                "--android-api $android.defaultConfig.minSdkVersion",
//                '--arch armeabi-v7a',
//                '--storage-dir .p4a',
//                '--java-build-tool=none'

        commandLine "./p4a.sh",
                "$electron",
                "$android.sdkDirectory",
                "$android.ndkDirectory",
                "$android.defaultConfig.minSdkVersion.apiString"
    }

    task copyLibs(type: Copy, description: 'Copy libs', dependsOn: buildPython) {
        from "$projectDir/.p4a-storage/dists/electroncash/libs/"
        into "$projectDir/src/main/libs"
        include "**/*.so"
    }

    task copyAssets(type: Copy, description: 'Copy assets', dependsOn: buildPython) {
        from "$projectDir/.p4a-storage/dists/electroncash/src/main/assets/"
        into "$projectDir/src/main/assets"
        include "*.mp3"
    }

    task buildNative(type: Exec, description: 'Compile JNI source via NDK', dependsOn: copyLibs) {
        def ndkDir = android.ndkDirectory
        commandLine "$ndkDir/ndk-build",
                '-C', file('src/main/jni').absolutePath,
                '-j', Runtime.runtime.availableProcessors(),
                'all',
                'APP_ABI=armeabi-v7a',
                'NDK_DEBUG=1'
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        def ndkDir = android.ndkDirectory
        commandLine "$ndkDir/ndk-build",
                '-C', file('src/main/jni').absolutePath,
                'clean',
                'APP_ABI=armeabi-v7a'
    }

//    clean.dependsOn 'cleanNative'

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn(buildPython, copyLibs, copyAssets, buildNative)
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}
